ENV['RACK_ENV'] ||= 'development'
rack_env = ENV['RACK_ENV']
app_dir = working_dir = "/var/24log/push_to_devices"
bluepill_opts = {
    :base_dir => app_dir,
    :log_file => "#{app_dir}/bluepill.log"
  }

ENV["BUNDLE_GEMFILE"] ||= "#{working_dir}/Gemfile"


def process_pid(process_name)
  `ps aux | grep #{process_name} | grep -v grep`.split(/\s/).reject{|x| x==""}.fetch(1, nil)
end

Bluepill.application('push_to_devices', bluepill_opts) do |app|
  app.process('unicorn') do |process|
    process.group = 'unicorn'
    process.pid_file = "/tmp/push_to_devices.pid"
    process.working_dir = working_dir

    process.start_command = "bundle exec unicorn -c #{working_dir}/config/unicorn.rb -E #{rack_env} -D"
    process.stop_command = "kill -QUIT {{PID}}"
    process.restart_command = "kill -USR2 {{PID}}"

    process.uid = process.gid = 'deployer'

    process.start_grace_time = 30.seconds
    process.stop_grace_time = 30.seconds
    process.restart_grace_time = 30.seconds

    process.monitor_children do |child_process|
      child_process.stop_command = "kill -QUIT {{PID}}"

      child_process.checks :mem_usage, :every => 30.seconds, :below => 200.megabytes, :times => [3,4],
        :fires => :stop
      child_process.checks :cpu_usage, :every => 30.seconds, :below => 40, :times => [3,4],
        :fires => :stop

    end
  end

   redis_node_manager_pname = "redis_node_manager"
#  if process_pid(redis_node_manager_pname).nil?
   app.process(redis_node_manager_pname) do |process|
      process.working_dir = working_dir
      process.group = 'redis'
      process.start_command = "bundle exec redis_node_manager -E #{rack_env} -C #{working_dir}/config/redis_node_manager.yml"
      process.stop_command = "kill -QUIT {{PID}}"
      process.pid_file = "#{working_dir}/shared/redis_node_manager.pid"
      process.daemonize = true
      process.stdout = process.stderr = "#{working_dir}/shared/redis_node_manager.log"
      process.start_grace_time = 30.seconds
      process.stop_grace_time = 30.seconds
      process.restart_grace_time = 30.seconds
      process.uid = process.gid = 'deployer'
   end
#  end

  app.process("resque-scheduler") do |process|
    process.working_dir = working_dir
    process.group = 'resque'
    process.start_command = 'bundle exec padrino rake resque:scheduler'
    process.stop_command = "kill -QUIT {{PID}}"
    process.pid_file = "#{working_dir}/shared/resque-scheduler.pid"
    process.daemonize = true

    process.start_grace_time = 60.seconds
    process.stop_grace_time = 60.seconds
    process.restart_grace_time = 60.seconds
    process.uid = process.gid = 'deployer'
  end

  1.times do |i|
    app.process("resque-#{i}") do |process|

      process.working_dir = working_dir
      process.group = 'resque'
      process.start_command = 'bundle exec padrino rake resque:work QUEUE=high,normal,low INTERVAL=0.5 VERBOSE=true TERM_CHILD=1 RESQUE_TERM_TIMEOUT=7'
      process.stop_command = "kill -TERM {{PID}}"
      process.stdout = process.stderr = "#{working_dir}/resque.log"
      process.pid_file = "#{working_dir}/shared/resque-#{i}.pid"
      process.daemonize = true

      process.start_grace_time = 60.seconds
      process.stop_grace_time = 60.seconds
      process.restart_grace_time = 90.seconds
      process.uid = process.gid = 'deployer'

      process.checks :mem_usage, :below => 350.megabytes, :every => 1.minute, :times => 3
    end
  end

end
